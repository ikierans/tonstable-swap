#include "imports/stdlib.fc";
#include "jetton_wallet.fc";
#include "jetton_minter.fc";



(slice, slice, cell) load_data() impure inline {
    cell data = get_data();
    return unpack_liquidity_pool_data(data);
} 

() save_data(slice tokenA, slice tokenB, cell liquidity_pool_code) impure inline {
    set_data(pack_liquidity_pool_data(tokenA, tokenB, liquidity_pool_code));
}

int calculateTokenRates(int amount, slice token1, slice token2) method_id {
    int balanceTo = get_balance_token();
    int balanceSend = get_balance_token();
    int k = balanceTo * balanceSend;
    int result = balanceSend - k / (balanceTo + amount);
    return result;  
}

() transaction_token(int amount, slice token1, slice token2) impure inline {
    int token_send = calculateTokenRates(amount, token1, token2);
    send_tokens(token_send, token1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int get_balance_token() method_id {
    ;; (int balance, _, _, _) = load_data();
    return 1000;
}
